:function! SetVundle()
    set nocompatible " required
    filetype off " required
    " set the runtime path to include vundle and initialize
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin() " required

    " Let vundle manage itself, required
    Plugin 'VundleVim/Vundle.vim'

    " Plugins
    Plugin 'Valloric/YouCompleteMe'

    " All of your plugins must be added before the following line
    call vundle#end() " required
    filetype plugin indent on " required

    let g:ycm_confirm_extra_conf=0
    let g:ycm_semantic_triggers =  {
    \   'c' : ['->', '.'],
    \   'objc' : ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s', 're!\[.*\]\s'],
    \   'ocaml' : ['.', '#'],
    \   'cpp,objcpp' : ['->', '.', '::'],
    \   'perl' : ['->'],
    \   'php' : ['->', '::'],
    \   'cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go' : ['.'],
    \   'ruby' : ['.', '::'],
    \   'lua' : ['.', ':'],
    \   'erlang' : [':'],
    \ }
    nnoremap <leader>gl :YcmCompleter GoToDeclaration<cr>
    nnoremap <leader>gf :YcmCompleter GoToDefinition<cr>
    nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<cr>
:endfunction

:function! SetDevelopmentMode()
    call SetVundle()

    map <C-K> :pyf ~/.vim/clang-format.py<cr>
    imap <C-K> <c-o>:pyf ~/.vim/clang-format.py<cr>

    set autoread
    command! Format :silent !clang-format -i %
    command! Fmt :Format

    " set tags+=~/.vim/systags
:endfunction

" :call SetDevelopmentMode()
" ============================

:set ruler
:set number
:hi  LineNr ctermfg=red
:set ignorecase
:set hlsearch

:set nowrap

" :set list
:set listchars=tab:>-,eol:$,nbsp:%
:set expandtab
:set tabstop=8
:set softtabstop=4
:set shiftwidth=4
:set autoindent
:set cindent

let g:netrw_liststyle=3

" :hi cursor ctermbg=black ctermfg=white
" :set cursorline
:hi cursorline term=underline cterm=underline " ctermbg=gray " ctermfg=red
" :set cursorcolumn
:hi cursorcolumn ctermbg=yellow " ctermfg=red
" :hi Visual ctermbg=darkgray ctermfg=green

map bf :buffers<cr>

:function! RegAutoBracket()
    inoremap ( ()<ESC>i
    inoremap [ []<ESC>i
    inoremap { {}<ESC>i
    inoremap < <><ESC>i
    inoremap " ""<ESC>i
    inoremap ' ''<ESC>i
:endfunction

:function! UnRegAutoBracket()
    iunmap (
    iunmap [
    iunmap {
    iunmap <
    iunmap "
    iunmap '
:endfunction

:command! AutoBracket :call RegAutoBracket()
:command! UnAutoBracket :call UnRegAutoBracket()

" :set backspace=indent,eol,start

:filetype on
:filetype plugin indent on

:syntax on
