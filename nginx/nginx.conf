
daemon  on;  # daemon on | off; Default: daemon on; -- Determines whether nginx should become a daemon. Mainly used during development.
user  www;  # user user [group]; Default: user nobody nobody; -- Defines user and group credentials used by worker processes. If group is omitted, a group whose name equals that of user is used.
# master_process on;  # master_process on | off; Default: master_process on; -- Determines whether worker processes are started. This directive is intended for nginx developers.
worker_processes  2;  # worker_processes number | auto; Default: worker_processes 1; -- Defines the number of worker processes.
# worker_cpu_affinity  # worker_cpu_affinity cpumask ...; worker_cpu_affinity auto [cpumask]; Default: --; -- Binds worker processes to the sets of CPUs.
# worker_priority 0;  # worker_priority number; Default: worker_priority 0; -- Defines the scheduling priority for worker processes like it is done by the nice command: a negative number means higher priority. Allowed range normally varies from -20 to 20.
# worker_rlimit_core;  # worker_rlimit_core size; Default: --; -- Changes the limit on the largest size of a core file (RLIMIT_CORE) for worker processes.
# worker_rlimit_nofile;  # worker_rlimit_nofile number; Default: --; -- Changes the limit on the maximum number of open files (RLIMIT_NOFILE) for worker processes.
# worker_shutdown_timeout;  # worker_shutdown_timeout time; Default: --; -- Configures a timeout for a graceful shutdown of worker processes. When the time expires, nginx will try to close all the connections currently open to facilitate shutdown.

pid  /run/nginx.pid;  # pid file; Default: pid logs/nginx.pid; -- Defines a file that will store the process ID of the main process.
lock_file  /run/nginx.lock;  # lock_file file; Default: lock_file logs/nginx.lock; -- nginx uses the locking mechanism to implement accept_mutex and serialize access to shared memory.

# thread_pool  # thread_pool name threads=number [max_queue=number]; Default: thread_pool default threads=32 max_queue=65536; -- Defines named thread pools used for multi-threaded reading and sending of files without blocking worker processes.

# env  TZ;  # env variable[=value]; Default: env TZ; -- By default, nginx removes all environment variables inherited from its parent process except the TZ variable. This directive allows preserving some of the inherited variables, changing their values, or creating new environment variables.
# timer_resolution;  # timer_resolution interval; Default: --; -- Reduces timer resolution in worker processes, thus reducing the number of gettimeofday() system calls made. By default, gettimeofday() is called each time a kernel event is received. With reduced resolution, gettimeofday() is only called once per specified interval.
# pcre_jit  off;  # pcre_jit on | off; Default: pcre_jit off; -- Enables or disables the use of “just-in-time compilation” (PCRE JIT) for the regular expressions known by the time of configuration parsing.
# ssl_engine;  # ssl_engine device; Default: --; -- Defines the name of the hardware SSL accelerator.

# load_module;  # load_module file; Default: --; -- Loads a dynamic module.

# debug_points;  # debug_points abort | stop; Default: --; -- This directive is used for debugging. When internal error is detected, e.g. the leak of sockets on restart of working processes, enabling debug_points leads to a core file creation (abort) or to stopping of a process (stop) for further analysis using a system debugger.
# working_directory;  # working_directory directory; Default: --; -- Defines the current working directory for a worker process. It is primarily used when writing a core-file, in which case a worker process should have write permission for the specified directory.
error_log  /var/log/nginx/error.log  error;  # error_log file [level]; Default: error_log logs/error.log error; -- Configures logging. Several logs can be specified on the same level (1.5.2). If on the main configuration level writing a log to a file is not explicitly defined, the default file will be used.
error_log  /var/log/nginx/info.log  info;

events {
    # use;  # use method; Default: --; -- Specifies the connection processing method to use. There is normally no need to specify it explicitly, because nginx will by default use the most efficient method.
    accept_mutex  on;  # accept_mutex on | off; Default: accept_mutex off; -- If accept_mutex is enabled, worker processes will accept new connections by turn. Otherwise, all worker processes will be notified about new connections, and if volume of new connections is low, some of the worker processes may just waste system resources.
    accept_mutex_delay  500ms;  # accept_mutex_delay time; Default: accept_mutex_delay 500ms; -- If accept_mutex is enabled, specifies the maximum time during which a worker process will try to restart accepting new connections if another worker process is currently accepting new connections.
    multi_accept  on;  # multi_accept on | off; Default: multi_accept off; -- If multi_accept is disabled, a worker process will accept one new connection at a time. Otherwise, a worker process will accept all new connections at a time.
    worker_connections  1024;  # worker_connections number; Default: worker_connections 512; -- Sets the maximum number of simultaneous connections that can be opened by a worker process.
    # worker_aio_requests  32;  # worker_aio_requests number; Default: worker_aio_requests 32; -- When using aio with the epoll connection processing method, sets the maximum number of outstanding asynchronous I/O operations for a single worker process.
    # debug_connection;  # debug_connection address | CIDR | unix:; Default: --; -- Enables debugging log for selected client connections. Other connections will use logging level set by the error_log directive.
}

# include;  # include file | mask; Default: --; -- Includes another file, or files matching the specified mask, into configuration. Included files should consist of syntactically correct directives and blocks.

http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    # use default log format: combined
    access_log  /var/log/nginx/access.log;

    sendfile        on;
    tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  reading.yiyi123.cn;

        #charset koi8-r;

        access_log  /var/log/nginx/yiyireading.access.log;

        root  /srv/www/yiyireading/public;
        index index.html index.php;

        location / {
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi_params;
        }
    }

}
