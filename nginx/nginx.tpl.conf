
daemon  on;  # daemon on | off; Default: daemon on; Context: main -- Determines whether nginx should become a daemon. Mainly used during development.
user  www;  # user user [group]; Default: user nobody nobody; Context: main -- Defines user and group credentials used by worker processes. If group is omitted, a group whose name equals that of user is used.
# master_process on;  # master_process on | off; Default: master_process on; Context: main -- Determines whether worker processes are started. This directive is intended for nginx developers.
worker_processes  2;  # worker_processes number | auto; Default: worker_processes 1; Context: main -- Defines the number of worker processes.
# worker_cpu_affinity  # worker_cpu_affinity cpumask ...; worker_cpu_affinity auto [cpumask]; Default: --; Context: main -- Binds worker processes to the sets of CPUs.
# worker_priority 0;  # worker_priority number; Default: worker_priority 0; Context: main -- Defines the scheduling priority for worker processes like it is done by the nice command: a negative number means higher priority. Allowed range normally varies from -20 to 20.
# worker_rlimit_core;  # worker_rlimit_core size; Default: --; Context: main -- Changes the limit on the largest size of a core file (RLIMIT_CORE) for worker processes.
# worker_rlimit_nofile;  # worker_rlimit_nofile number; Default: --; Context: main -- Changes the limit on the maximum number of open files (RLIMIT_NOFILE) for worker processes.
# worker_shutdown_timeout;  # worker_shutdown_timeout time; Default: --; Context: main -- Configures a timeout for a graceful shutdown of worker processes. When the time expires, nginx will try to close all the connections currently open to facilitate shutdown.

pid  /run/nginx.pid;  # pid file; Default: pid logs/nginx.pid; Context: main -- Defines a file that will store the process ID of the main process.
lock_file  /run/nginx.lock;  # lock_file file; Default: lock_file logs/nginx.lock; Context: main -- nginx uses the locking mechanism to implement accept_mutex and serialize access to shared memory.

# thread_pool  # thread_pool name threads=number [max_queue=number]; Default: thread_pool default threads=32 max_queue=65536; Context: main -- Defines named thread pools used for multi-threaded reading and sending of files without blocking worker processes.

# env  TZ;  # env variable[=value]; Default: env TZ; Context: main -- By default, nginx removes all environment variables inherited from its parent process except the TZ variable. This directive allows preserving some of the inherited variables, changing their values, or creating new environment variables.
# timer_resolution;  # timer_resolution interval; Default: --; Context: main -- Reduces timer resolution in worker processes, thus reducing the number of gettimeofday() system calls made. By default, gettimeofday() is called each time a kernel event is received. With reduced resolution, gettimeofday() is only called once per specified interval.
# pcre_jit  off;  # pcre_jit on | off; Default: pcre_jit off; Context: main -- Enables or disables the use of “just-in-time compilation” (PCRE JIT) for the regular expressions known by the time of configuration parsing.
# ssl_engine;  # ssl_engine device; Default: --; Context: main -- Defines the name of the hardware SSL accelerator.

# load_module;  # load_module file; Default: --; Context: main -- Loads a dynamic module.

# debug_points;  # debug_points abort | stop; Default: --; Context: main -- This directive is used for debugging. When internal error is detected, e.g. the leak of sockets on restart of working processes, enabling debug_points leads to a core file creation (abort) or to stopping of a process (stop) for further analysis using a system debugger.
# working_directory;  # working_directory directory; Default: --; Context: main -- Defines the current working directory for a worker process. It is primarily used when writing a core-file, in which case a worker process should have write permission for the specified directory.
error_log  /var/log/nginx/error.log  error;  # error_log file [level]; Default: error_log logs/error.log error; Context: main, http, mail, stream, server, location -- Configures logging. Several logs can be specified on the same level (1.5.2). If on the main configuration level writing a log to a file is not explicitly defined, the default file will be used.
error_log  /var/log/nginx/info.log  info;

events  {
    # use;  # use method; Default: --; Context: events -- Specifies the connection processing method to use. There is normally no need to specify it explicitly, because nginx will by default use the most efficient method.
    accept_mutex  on;  # accept_mutex on | off; Default: accept_mutex off; Context: events -- If accept_mutex is enabled, worker processes will accept new connections by turn. Otherwise, all worker processes will be notified about new connections, and if volume of new connections is low, some of the worker processes may just waste system resources.
    accept_mutex_delay  500ms;  # accept_mutex_delay time; Default: accept_mutex_delay 500ms; Context: events -- If accept_mutex is enabled, specifies the maximum time during which a worker process will try to restart accepting new connections if another worker process is currently accepting new connections.
    multi_accept  on;  # multi_accept on | off; Default: multi_accept off; Context: events -- If multi_accept is disabled, a worker process will accept one new connection at a time. Otherwise, a worker process will accept all new connections at a time.
    worker_connections  1024;  # worker_connections number; Default: worker_connections 512; Context: events -- Sets the maximum number of simultaneous connections that can be opened by a worker process.
    # worker_aio_requests  32;  # worker_aio_requests number; Default: worker_aio_requests 32; Context: events -- When using aio with the epoll connection processing method, sets the maximum number of outstanding asynchronous I/O operations for a single worker process.
    # debug_connection;  # debug_connection address | CIDR | unix:; Default: --; Context: events -- Enables debugging log for selected client connections. Other connections will use logging level set by the error_log directive.
}

# include;  # include file | mask; Default: --; Context: any -- Includes another file, or files matching the specified mask, into configuration. Included files should consist of syntactically correct directives and blocks.

http  {
    # $arg_name  # argument name in the request line
    # $args  # arguments in the request line
    # $query_string  # same as $args
    # $binary_remote_addr  # client address in a binary form, value’s length is always 4 bytes for IPv4 addresses or 16 bytes for IPv6 addresses
    # $body_bytes_sent  # number of bytes sent to a client, not counting the response header
    # $bytes_sent  # number of bytes sent to a client
    # $connection  # connection serial number
    # $connection_requests  # current number of requests made through a connection
    # $content_length  # “Content-Length” request header field
    # $content_type  # “Content-Type” request header field
    # $cookie_name  # the name cookie
    # $document_root  # root or alias directive’s value for the current request
    # $uri  # current URI in request, normalized. The value of $uri may change during request processing, e.g. when doing internal redirects, or when using index files.
    # $document_uri  # same as $uri
    # $host  # in this order of precedence: host name from the request line, or host name from the “Host” request header field, or the server name matching a request
    # $hostname  # host name
    # $http_name  # arbitrary request header field; the last part of a variable name is the field name converted to lower case with dashes replaced by underscores
    # $https  # “on” if connection operates in SSL mode, or an empty string otherwise
    # $is_args  # “?” if a request line has arguments, or an empty string otherwise
    # $limit_rate  # setting this variable enables response rate limiting; see limit_rate
    # $msec  # current time in seconds with the milliseconds resolution
    # $nginx_version  # nginx version
    # $pid  # PID of the worker process
    # $pipe  # “p” if request was pipelined, “.” otherwise
    # $proxy_protocol_addr  # client address from the PROXY protocol header, or an empty string otherwise
    # $proxy_protocol_port  # client port from the PROXY protocol header, or an empty string otherwise
    # $realpath_root  # an absolute pathname corresponding to the root or alias directive’s value for the current request, with all symbolic links resolved to real paths
    # $remote_addr  # client address
    # $remote_port  # client port
    # $remote_user  # user name supplied with the Basic authentication
    # $request  # full original request line
    # $request_body  # request body
    # $request_body_file  # name of a temporary file with the request body
    # $request_completion  # “OK” if a request has completed, or an empty string otherwise
    # $request_filename  # file path for the current request, based on the root or alias directives, and the request URI
    # $request_id  # unique request identifier generated from 16 random bytes, in hexadecimal
    # $request_length  # request length (including request line, header, and request body)
    # $request_method  # request method, usually “GET” or “POST”
    # $request_time  # request processing time in seconds with a milliseconds resolution (1.3.9, 1.2.6); time elapsed since the first bytes were read from the client
    # $request_uri  # full original request URI (with arguments)
    # $scheme  # request scheme, “http” or “https”
    # $sent_http_name  # arbitrary response header field; the last part of a variable name is the field name converted to lower case with dashes replaced by underscores
    # $sent_trailer_name  # arbitrary field sent at the end of the response (1.13.2); the last part of a variable name is the field name converted to lower case with dashes replaced by underscores
    # $server_addr  # an address of the server which accepted a request
    # $server_name  # name of the server which accepted a request
    # $server_port  # port of the server which accepted a request
    # $server_protocol  # request protocol, usually “HTTP/1.0”, “HTTP/1.1”, or “HTTP/2.0”
    # $status  # response status
    # $tcpinfo_rtt, $tcpinfo_rttvar, $tcpinfo_snd_cwnd, $tcpinfo_rcv_space  # information about the client TCP connection; available on systems that support the TCP_INFO socket option
    # $time_iso8601  # local time in the ISO 8601 standard format
    # $time_local  # local time in the Common Log Format

    # types  {}  # types { ... } Default: types {text/html html; image/gif gif; image/jpeg jpg;} Context: http, server, location -- Maps file name extensions to MIME types of responses. Extensions are case-insensitive.
    # types_hash_bucket_size  64;  # types_hash_bucket_size size; Default: types_hash_bucket_size 64; Context: http, server, location -- Sets the bucket size for the types hash tables.
    # types_hash_max_size  1024;  # types_hash_max_size size; Default: types_hash_max_size 1024; Context: http, server, location -- Sets the maximum size of the types hash tables.
    include  mime.types;
    default_type  application/octet-stream;  # default_type mime-type; Default: default_type text/plain; Context: 	http, server, location -- Defines the default MIME type of a response.

    # server_names_hash_bucket_size  64;  # server_names_hash_bucket_size size; Default: server_names_hash_bucket_size 32|64|128; Context: http -- Sets the bucket size for the server names hash tables. The default value depends on the size of the processor’s cache line.
    # server_names_hash_max_size  512;  # server_names_hash_max_size size; Default: server_names_hash_max_size 512; Context: http -- Sets the maximum size of the server names hash tables.
    # variables_hash_bucket_size  64;  # variables_hash_bucket_size size; Default: variables_hash_bucket_size 64; Context: http -- Sets the bucket size for the variables hash table.
    # variables_hash_max_size  1024;  # variables_hash_max_size size; Default: variables_hash_max_size 1024; Context: http -- Sets the maximum size of the variables hash table.

    # resolver;  # resolver address ... [valid=time] [ipv6=on|off]; Default: --; Context: http, server, location -- Configures name servers used to resolve names of upstream servers into addresses
    # resolver_timeout  30s;  # resolver_timeout time; Default: resolver_timeout 30s; Context: http, server, location -- Sets a timeout for name resolution

    # absolute_redirect  on;  # absolute_redirect on | off; Default: absolute_redirect on; Context: http, server, location -- If disabled, redirects issued by nginx will be relative.
    # server_name_in_redirect  off;  # server_name_in_redirect on | off; Default: server_name_in_redirect off; Context: http, server, location -- Enables or disables the use of the primary server name, specified by the server_name directive, in absolute redirects issued by nginx.
    # port_in_redirect  on;  # port_in_redirect on | off; Default: port_in_redirect on; Context: http, server, location -- Enables or disables specifying the port in absolute redirects issued by nginx.

    # satisfy  all;  # satisfy all | any; Default: satisfy all; Context: http, server, location -- Allows access if all (all) or at least one (any) of the ngx_http_access_module, ngx_http_auth_basic_module, ngx_http_auth_request_module, or ngx_http_auth_jwt_module modules allow access.

    # connection_pool_size  256;  # connection_pool_size size; Default: connection_pool_size 256|512; Context: http, server -- Allows accurate tuning of per-connection memory allocations. This directive has minimal impact on performance and should not generally be used.
    # lingering_close  on;  # lingering_close off | on | always; Default: lingering_close on; Context: http, server, location -- Controls how nginx closes client connections.
    # lingering_time  30s;  # lingering_time time; Default: lingering_time 30s; Context: http, server, location -- When lingering_close is in effect, this directive specifies the maximum time during which nginx will process (read and ignore) additional data coming from a client. After that, the connection will be closed, even if there will be more data.
    # lingering_timeout  5s;  # lingering_timeout time; Default: lingering_timeout 5s; Context: http, server, location -- When lingering_close is in effect, this directive specifies the maximum waiting time for more client data to arrive.

    # keepalive_disable  msie6;  # keepalive_disable none | browser ...; Default: keepalive_disable msie6; Context: http, server, location -- Disables keep-alive connections with misbehaving browsers.
    # keepalive_requests  100;  # keepalive_requests number; Default: keepalive_requests 100; Context: http, server, location -- Sets the maximum number of requests that can be served through one keep-alive connection. After the maximum number of requests are made, the connection is closed.
    # keepalive_timeout  75s;  # keepalive_timeout timeout [header_timeout]; Default: keepalive_timeout 75s; Context: http, server, location -- The first parameter sets a timeout during which a keep-alive client connection will stay open on the server side. The zero value disables keep-alive client connections. The optional second parameter sets a value in the “Keep-Alive: timeout=time” response header field.

    # reset_timedout_connection  off;  # reset_timedout_connection on | off; Default: reset_timedout_connection off; Context: http, server, location -- Enables or disables resetting timed out connections.

    # request_pool_size  4k;  # request_pool_size size; Default: request_pool_size 4k; Context: http, server -- Allows accurate tuning of per-request memory allocations. This directive has minimal impact on performance and should not generally be used.

    # client_header_buffer_size  1k;  # client_header_buffer_size size; Default: client_header_buffer_size 1k; Context: http, server -- Sets buffer size for reading client request header.
    # large_client_header_buffers  4  8k;  # large_client_header_buffers number size; Default: large_client_header_buffers 4 8k; Context: http, server -- Sets the maximum number and size of buffers used for reading large client request header.
    # client_header_timeout  60s;  # client_header_timeout time; Default: client_header_timeout 60s; Context: http, server -- Defines a timeout for reading client request header. If a client does not transmit the entire header within this time, the request is terminated with the 408 (Request Time-out) error.
    # ignore_invalid_headers  on;  # ignore_invalid_headers on | off; Default: ignore_invalid_headers on; Context: http, server -- Controls whether header fields with invalid names should be ignored.
    # underscores_in_headers  off;  # underscores_in_headers on | off; Default: underscores_in_headers off; Context: http, server -- Enables or disables the use of underscores in client request header fields.

    # client_body_buffer_size  8k;  # client_body_buffer_size size; Default: client_body_buffer_size 8k|16k; Context: http, server, location -- Sets buffer size for reading client request body.
    # client_body_temp_path  client_body_temp;  # client_body_temp_path path [level1 [level2 [level3]]]; Default: client_body_temp_path client_body_temp; Context: http, server, location -- Defines a directory for storing temporary files holding client request bodies.
    # client_body_timeout  60s;  # client_body_timeout time; Default: client_body_timeout 60s; Context: http, server, location -- Defines a timeout for reading client request body. The timeout is set only for a period between two successive read operations, not for the transmission of the whole request body.
    # client_max_body_size  1m;  # client_max_body_size size; Default: client_max_body_size 1m; Context: http, server, location -- Sets the maximum allowed size of the client request body, specified in the “Content-Length” request header field.
    # client_body_in_file_only  off;  # client_body_in_file_only on | clean | off; Default: client_body_in_file_only off; Context: http, server, location -- Determines whether nginx should save the entire client request body into a file.
    # client_body_in_single_buffer  off;  # client_body_in_single_buffer on | off; Default: client_body_in_single_buffer off; Context: http, server, location -- Determines whether nginx should save the entire client request body in a single buffer.

    root  html;  # root path; Default: root html; Context: http, server, location, if in location -- Sets the root directory for requests.
    disable_symlinks  off;  # disable_symlinks off; | disable_symlinks on | if_not_owner [from=part]; Default: disable_symlinks off; Context: http, server, location -- Determines how symbolic links should be treated when opening files

    # open_file_cache  off;  # open_file_cache off; | open_file_cache max=N [inactive=time]; Default: open_file_cache off; Context: http, server, location
    # open_file_cache_errors  off;  # open_file_cache_errors on | off; Default: open_file_cache_errors off; Context: http, server, location -- Enables or disables caching of file lookup errors by open_file_cache.
    # open_file_cache_min_uses  1;  # open_file_cache_min_uses number; Default: open_file_cache_min_uses 1; Context: http, server, location -- Sets the minimum number of file accesses during the period configured by the inactive parameter of the open_file_cache directive, required for a file descriptor to remain open in the cache.
    # open_file_cache_valid  60s;  # open_file_cache_valid time; Default: open_file_cache_valid 60s; Context: http, server, location -- Sets a time after which open_file_cache elements should be validated.

    # output_buffers  2  32k;  # output_buffers number size; Default: output_buffers 2 32k; Context: http, server, location -- Sets the number and size of the buffers used for reading a response from a disk.
    # limit_rate  0;  # limit_rate rate; Default: limit_rate 0; Context: http, server, location, if in location -- Limits the rate of response transmission to a client. The rate is specified in bytes per second. The zero value disables rate limiting.
    # limit_rate_after  0;  # limit_rate_after size; Default: limit_rate_after 0; Context: http, server, location, if in location -- Sets the initial amount after which the further transmission of a response to a client will be rate limited.
    # send_timeout  60s;  # send_timeout time; Default: send_timeout 60s; Context: http, server, location -- Sets a timeout for transmitting a response to the client. The timeout is set only between two successive write operations, not for the transmission of the whole response.
    # subrequest_output_buffer_size  4k;  # subrequest_output_buffer_size size; Default: subrequest_output_buffer_size 4k|8k; Context: http, server, location -- Sets the size of the buffer used for storing the response body of a subrequest.

    # aio  off;  # aio on | off | threads[=pool]; Default: aio off; Context: http, server, location -- Enables or disables the use of asynchronous file I/O (AIO) on FreeBSD and Linux.
    # aio_write  off;  # aio_write on | off; Default: aio_write off; Context: http, server, location -- If aio is enabled, specifies whether it is used for writing files. Currently, this only works when using aio threads and is limited to writing temporary files with data received from proxied servers.
    # directio  off;  # directio size | off; Default: directio off; Context: http, server, location -- Enables the use of the O_DIRECT flag (FreeBSD, Linux), the F_NOCACHE flag (macOS), or the directio() function (Solaris), when reading files that are larger than or equal to the specified size. The directive automatically disables (0.7.15) the use of sendfile for a given request.
    # directio_alignment  512;  # directio_alignment size; Default: directio_alignment 512; Context: http, server, location -- Sets the alignment for directio. In most cases, a 512-byte alignment is enough. However, when using XFS under Linux, it needs to be increased to 4K.
    # sendfile  on;  # sendfile on | off; Default: sendfile off; Context: http, server, location, if in location -- Enables or disables the use of sendfile()
    # sendfile_max_chunk  0;  # sendfile_max_chunk size; Default: sendfile_max_chunk 0; Context: http, server, location -- When set to a non-zero value, limits the amount of data that can be transferred in a single sendfile() call. Without the limit, one fast connection may seize the worker process entirely.
    # read_ahead  0;  # read_ahead size; Default: read_ahead 0; Context: http, server, location -- Sets the amount of pre-reading for the kernel when working with file.
    # tcp_nopush  on;  # tcp_nopush on | off; Default: tcp_nopush off; Context: http, server, location -- Enables or disables the use of the TCP_NOPUSH socket option on FreeBSD or the TCP_CORK socket option on Linux.
    # tcp_nodelay  on;  # tcp_nodelay on | off; Default: tcp_nodelay on; Context: http, server, location -- Enables or disables the use of the TCP_NODELAY option.
    # postpone_output  1460;  # postpone_output size; Default: postpone_output 1460; Context: http, server, location -- If possible, the transmission of client data will be postponed until nginx has at least size bytes of data to send. The zero value disables postponing data transmission.
    # send_lowat  0;  # send_lowat size; Default: send_lowat 0; Context: http, server, location -- If the directive is set to a non-zero value, nginx will try to minimize the number of send operations on client sockets by using either NOTE_LOWAT flag of the kqueue method or the SO_SNDLOWAT socket option.

    # etag  on;  # etag on | off; Default: etag on; Context: http, server, location -- Enables or disables automatic generation of the “ETag” response header field for static resources.
    # if_modified_since  exact;  # if_modified_since off | exact | before; Default: if_modified_since exact; Context: http, server, location -- Specifies how to compare modification time of a response with the time in the “If-Modified-Since” request header field.
    # max_ranges;  # max_ranges number; Default: --; Context: http, server, location -- Limits the maximum allowed number of ranges in byte-range requests. Requests that exceed the limit are processed as if there were no byte ranges specified.
    # server_tokens  on;  # server_tokens on | off | build | string; Default: server_tokens on; Context: http, server, location -- Enables or disables emitting nginx version on error pages and in the “Server” response header field.

    # merge_slashes  on;  # merge_slashes on | off; Default: merge_slashes on; Context: http, server -- Enables or disables compression of two or more adjacent slashes in a URI into a single slash.
    # chunked_transfer_encoding  on;  # chunked_transfer_encoding on | off; Default: chunked_transfer_encoding on; Context: http, server, location -- Allows disabling chunked transfer encoding in HTTP/1.1. It may come in handy when using a software failing to support chunked encoding despite the standard’s requirement.
    # msie_padding  on;  # msie_padding on | off; Default: msie_padding on; Context: http, server, location -- Enables or disables adding comments to responses for MSIE clients with status greater than 400 to increase the response size to 512 bytes.
    # msie_refresh  off;  # msie_refresh on | off; Default: msie_refresh off; Context: http, server, location -- Enables or disables issuing refreshes instead of redirects for MSIE clients.

    # error_page;  # error_page code ... [=[response]] uri; Default: --; Context: http, server, location, if in location -- Defines the URI that will be shown for the specified errors.
    # recursive_error_pages  off;  # recursive_error_pages on | off; Default: recursive_error_pages off; Context: http, server, location -- Enables or disables doing several redirects using the error_page directive.
    # log_not_found  on;  # log_not_found on | off; Default: log_not_found on; Context: http, server, location -- Enables or disables logging of errors about not found files into error_log.
    # log_subrequest  off;  # log_subrequest on | off; Default: log_subrequest off; Context: http, server, location -- Enables or disables logging of subrequests into access_log.

    fastcgi_temp_path  /var/local/nginx/fastcgi_temp;  # FastCGI

    # ==========  HTTP Headers Begin  ==========
    # add_header;  # add_header name value [always]; Default: --; Context: http, server, location, if in location -- Adds the specified field to a response header provided that the response code equals 200, 201 (1.3.10), 204, 206, 301, 302, 303, 304, 307 (1.1.16, 1.0.13), or 308 (1.13.0). The value can contain variables.
    # add_trailer;  # add_trailer name value [always]; Default: --; Context: http, server, location, if in location -- Adds the specified field to the end of a response provided that the response code equals 200, 201, 206, 301, 302, 303, 307, or 308. The value can contain variables.
    # expires  off;  # expires [modified] time; | expires epoch | max | off; Default: expires off; Context: http, server, location, if in location -- Enables or disables adding or modifying the “Expires” and “Cache-Control” response header fields provided that the response code equals 200, 201 (1.3.10), 204, 206, 301, 302, 303, 304, 307 (1.1.16, 1.0.13), or 308 (1.13.0). The parameter can be a positive or negative time.
    # ==========  HTTP Headers End  ==========

    # ==========  HTTP Log Begin  ==========
    # log_format name [escape=default|json|none] string ...; Default: log_format combined "..."; Context: http -- Specifies log format.
    # The log format can contain common variables, and variables that exist only at the time of a log write:
    # $bytes_sent  # the number of bytes sent to a client
    # $connection  # connection serial number
    # $connection_requests  # the current number of requests made through a connection (1.1.18)
    # $msec  # time in seconds with a milliseconds resolution at the time of the log write
    # $pipe  # “p” if request was pipelined, “.” otherwise
    # $request_length  # request length (including request line, header, and request body)
    # $request_time  # request processing time in seconds with a milliseconds resolution; time elapsed between the first bytes were read from the client and the log write after the last bytes were sent to the client
    # $status  # response status
    # $time_iso8601  # local time in the ISO 8601 standard format
    # $time_local  # local time in the Common Log Format
    # In the modern nginx versions variables $status (1.3.2, 1.2.2), $bytes_sent (1.3.8, 1.2.5), $connection (1.3.8, 1.2.5), $connection_requests (1.3.8, 1.2.5), $msec (1.3.9, 1.2.6), $request_time (1.3.9, 1.2.6), $pipe (1.3.12, 1.2.7), $request_length (1.3.12, 1.2.7), $time_iso8601 (1.3.12, 1.2.7), and $time_local (1.3.12, 1.2.7) are also available as common variables.
    # log_format  main  '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"'
    log_format  yiyireading  '[$time_iso8601] <$request_id> <$remote_addr> "$request" <$status> <$request_time> <$body_bytes_sent> "$http_referer" "$http_user_agent"';
    access_log  /var/log/nginx/access.log;  # access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]]; | access_log off; Default: access_log logs/access.log combined; Context: http, server, location, if in location, limit_except -- Sets the path, format, and configuration for a buffered log write.
    # open_log_file_cache  off;  # open_log_file_cache max=N [inactive=time] [min_uses=N] [valid=time]; | open_log_file_cache off; Default: open_log_file_cache off; Context: http, server, location -- Defines a cache that stores the file descriptors of frequently used logs whose names contain variables.
    # ==========  HTTP Log End  ==========

    server  {
        listen  80;  # Default: listen *:80 | *:8000; Context: server -- Sets the address and port for IP, or the path for a UNIX-domain socket on which the server will accept requests.
        listen  8080;
        server_name  reading.yiyi123.cn;  # server_name name ...; Default: server_name ""; Context: server -- Sets names of a virtual server
        # try_files;  # try_files file ... uri; | try_files file ... =code; Default: --; Context: server, location -- Checks the existence of files in the specified order and uses the first found file for request processing; the processing is performed in the current context.

        root  /srv/www/yiyireading/public;
        index  index.html  index.php;

        #charset koi8-r;

        access_log  /var/log/nginx/yiyireading.access.log  yiyireading;

        location  /  {
            # alias;  # alias path; Default: --; Context: location -- Defines a replacement for the specified location.
            # internal;  # internal; Default: --; Context: location -- Specifies that a given location can only be used for internal requests.
            # limit_except;  # limit_except method ... { ... } Default: --; Context: location -- Limits allowed HTTP methods inside a location.

            # ==========  FastCGI Begin  ==========
            # $fastcgi_script_name  # request URI or, if a URI ends with a slash, request URI with an index file name configured by the fastcgi_index directive appended to it.
            # $fastcgi_path_info  # the value of the second capture set by the fastcgi_split_path_info directive. This variable can be used to set the PATH_INFO parameter.

            fastcgi_pass  127.0.0.1:9000;  # fastcgi_pass address; Default: --; Context: location, if in location -- Sets the address of a FastCGI server.
            # fastcgi_split_path_info;  # fastcgi_split_path_info regex; Default: --; Context: location -- Defines a regular expression that captures a value for the $fastcgi_path_info variable.
            fastcgi_index  index.php;  # fastcgi_index name; Default: --; Context: http, server, location -- Sets a file name that will be appended after a URI that ends with a slash, in the value of the $fastcgi_script_name variable.
            include  fastcgi_params;
            fastcgi_param  REQUEST_ID  $request_id;
            fastcgi_param  SCRIPT_NAME  /index.php;
            fastcgi_param  SCRIPT_FILENAME  /srv/www/yiyireading/public/index.php;  # fastcgi_param parameter value [if_not_empty]; Default: --; Context: http, server, location -- Sets a parameter that should be passed to the FastCGI server.

            # fastcgi_bind;  # fastcgi_bind address [transparent] | off; Default: --; Context: http, server, location -- Makes outgoing connections to a FastCGI server originate from the specified local IP address with an optional port.

            fastcgi_request_buffering  on;  # fastcgi_request_buffering on | off; Default: fastcgi_request_buffering on; Context: http, server, location -- Enables or disables buffering of a client request body.

            # fastcgi_connect_timeout  60s;  # fastcgi_connect_timeout time; Default: fastcgi_connect_timeout 60s; Context: http, server, location -- Defines a timeout for establishing a connection with a FastCGI server.
            fastcgi_keep_conn  on;  # fastcgi_keep_conn on | off; Default: fastcgi_keep_conn off; Context: http, server, location -- By default, a FastCGI server will close a connection right after sending the response. However, when this directive is set to the value on, nginx will instruct a FastCGI server to keep connections open.
            # fastcgi_socket_keepalive  on;  # fastcgi_socket_keepalive on | off; Default: fastcgi_socket_keepalive off; Context: http, server, location -- Configures the “TCP keepalive” behavior for outgoing connections to a FastCGI server.
            # fastcgi_ignore_client_abort  off;  # fastcgi_ignore_client_abort on | off; Default: fastcgi_ignore_client_abort off; Context: http, server, location -- Determines whether the connection with a FastCGI server should be closed when a client closes the connection without waiting for a response.

            # fastcgi_send_lowat  0;  # fastcgi_send_lowat size; Default: fastcgi_send_lowat 0; Context: http, server, location -- If the directive is set to a non-zero value, nginx will try to minimize the number of send operations on outgoing connections to a FastCGI server by using either NOTE_LOWAT flag of the kqueue method, or the SO_SNDLOWAT socket option, with the specified size.
            # fastcgi_send_timeout  60s;  # fastcgi_send_timeout time; Default: fastcgi_send_timeout 60s; Context: http, server, location -- Sets a timeout for transmitting a request to the FastCGI server. The timeout is set only between two successive write operations, not for the transmission of the whole request.
            # fastcgi_pass_request_headers  on;  # fastcgi_pass_request_headers on | off; Default: fastcgi_pass_request_headers on; Context: http, server, location -- Indicates whether the header fields of the original request are passed to the FastCGI server.
            # fastcgi_pass_request_body  on;  # fastcgi_pass_request_body on | off; Default: fastcgi_pass_request_body on; Context: http, server, location -- Indicates whether the original request body is passed to the FastCGI server.

            # fastcgi_buffering  on;  # fastcgi_buffering on | off; Default: fastcgi_buffering on; Context: http, server, location -- Enables or disables buffering of responses from the FastCGI server.
            # fastcgi_buffer_size  4k;  # fastcgi_buffer_size size; Default: fastcgi_buffer_size 4k|8k; Context: http, server, location -- Sets the size of the buffer used for reading the first part of the response received from the FastCGI server.
            # fastcgi_buffers  8  4k;  # fastcgi_buffers number size; Default: fastcgi_buffers 8 4k|8k; Context: http, server, location -- Sets the number and size of the buffers used for reading a response from the FastCGI server, for a single connection.
            # fastcgi_busy_buffers_size  8k;  # fastcgi_busy_buffers_size size; Default: fastcgi_busy_buffers_size 8k|16k; Context: http, server, location -- When buffering of responses from the FastCGI server is enabled, limits the total size of buffers that can be busy sending a response to the client while the response is not yet fully read.

            # fastcgi_temp_path  temp;  # fastcgi_temp_path path [level1 [level2 [level3]]]; Default: fastcgi_temp_path fastcgi_temp; Context: http, server, location -- Defines a directory for storing temporary files with data received from FastCGI servers.
            # fastcgi_temp_file_write_size  8k;  # fastcgi_temp_file_write_size size; Default: fastcgi_temp_file_write_size 8k|16k; Context: http, server, location -- Limits the size of data written to a temporary file at a time, when buffering of responses from the FastCGI server to temporary files is enabled.
            # fastcgi_max_temp_file_size  1024m;  # fastcgi_max_temp_file_size size; Default: fastcgi_max_temp_file_size 1024m; Context: http, server, location -- When buffering of responses from the FastCGI server is enabled, and the whole response does not fit into the buffers set by the fastcgi_buffer_size and fastcgi_buffers directives, a part of the response can be saved to a temporary file.

            # fastcgi_read_timeout  60s;  # fastcgi_read_timeout time; Default: fastcgi_read_timeout 60s; Context: http, server, location -- Defines a timeout for reading a response from the FastCGI server.
            # fastcgi_limit_rate  0;  # fastcgi_limit_rate rate; Default: fastcgi_limit_rate 0; Context: http, server, location -- Limits the speed of reading the response from the FastCGI server.
            # fastcgi_intercept_errors  off;  # fastcgi_intercept_errors on | off; Default: fastcgi_intercept_errors off; Context: http, server, location -- Determines whether FastCGI server responses with codes greater than or equal to 300 should be passed to a client or be intercepted and redirected to nginx for processing with the error_page directive.

            # fastcgi_hide_header;  # fastcgi_hide_header field; Default: --; Context: http, server, location -- By default, nginx does not pass the header fields “Status” and “X-Accel-...” from the response of a FastCGI server to a client.
            # fastcgi_pass_header;  # fastcgi_pass_header field; Default: --; Context: http, server, location -- Permits passing otherwise disabled header fields from a FastCGI server to a client.
            # fastcgi_ignore_headers;  # fastcgi_ignore_headers field ...; Default: --; Context: http, server, location -- Disables processing of certain response header fields from the FastCGI server.
            # fastcgi_force_ranges  off;  # fastcgi_force_ranges on | off; Default: fastcgi_force_ranges off; Context: http, server, location -- Enables byte-range support for both cached and uncached responses from the FastCGI server regardless of the “Accept-Ranges” field in these responses.

            # fastcgi_catch_stderr;  # fastcgi_catch_stderr string; Default: --; Context: http, server, location -- Sets a string to search for in the error stream of a response received from a FastCGI server.
            # fastcgi_next_upstream;  # fastcgi_next_upstream error | timeout | ...; Default: fastcgi_next_upstream error timeout; Context: http, server, location -- Specifies in which cases a request should be passed to the next server.
            # fastcgi_next_upstream_timeout;  # fastcgi_next_upstream_timeout time; Default: fastcgi_next_upstream_timeout 0; Context: http, server, location -- Limits the time during which a request can be passed to the next server.
            # fastcgi_next_upstream_tries;  # fastcgi_next_upstream_tries number; Default: fastcgi_next_upstream_tries 0; Context: http, server, location -- Limits the number of possible tries for passing a request to the next server. The 0 value turns off this limitation.

            # fastcgi_store  off;  # fastcgi_store on | off | string; Default: fastcgi_store off; Context: http, server, location -- Enables saving of files to a disk. The on parameter saves files with paths corresponding to the directives alias or root.
            # fastcgi_store_access;  # fastcgi_store_access users:permissions ...; Default: fastcgi_store_access user:rw; Context: http, server, location -- Sets access permissions for newly created files and directories

            # fastcgi_cache  off;  # fastcgi_cache zone | off; Default: fastcgi_cache off; Context: http, server, location -- Defines a shared memory zone used for caching. The same zone can be used in several places.
            # fastcgi_no_cache;  # fastcgi_no_cache string ...; Default: --; Context: http, server, location -- Defines conditions under which the response will not be saved to a cache.
            # fastcgi_cache_methods  GET  HEAD;  # fastcgi_cache_methods GET | HEAD | POST ...; Default: fastcgi_cache_methods GET HEAD; Context: http, server, location -- If the client request method is listed in this directive then the response will be cached.
            # fastcgi_cache_path;  # fastcgi_cache_path path [levels=levels] [use_temp_path=on|off] ... Default: --; Context: http -- Sets the path and other parameters of a cache.
            # fastcgi_cache_key;  # fastcgi_cache_key string; Default: --; Context: http, server, location -- Defines a key for caching
            # fastcgi_cache_lock  off;  # fastcgi_cache_lock on | off; Default: fastcgi_cache_lock off; Context: http, server, location -- When enabled, only one request at a time will be allowed to populate a new cache element identified according to the fastcgi_cache_key directive by passing a request to a FastCGI server.
            # fastcgi_cache_lock_timeout  5s;  # fastcgi_cache_lock_timeout time; Default: fastcgi_cache_lock_timeout 5s; Context: http, server, location -- Sets a timeout for fastcgi_cache_lock. When the time expires, the request will be passed to the FastCGI server, however, the response will not be cached.
            # fastcgi_cache_lock_age  5s;  # fastcgi_cache_lock_age time; Default: fastcgi_cache_lock_age 5s; Context: http, server, location -- If the last request passed to the FastCGI server for populating a new cache element has not completed for the specified time, one more request may be passed to the FastCGI server.
            # fastcgi_cache_min_uses  1;  # fastcgi_cache_min_uses number; Default: fastcgi_cache_min_uses 1; Context: http, server, location -- Sets the number of requests after which the response will be cached.
            # fastcgi_cache_valid;  # fastcgi_cache_valid [code ...] time; Default: --; Context: http, server, location -- Sets caching time for different response codes.
            # fastcgi_cache_revalidate  off;  # fastcgi_cache_revalidate on | off; Default: fastcgi_cache_revalidate off; Context: http, server, location -- Enables revalidation of expired cache items using conditional requests with the “If-Modified-Since” and “If-None-Match” header fields.
            # fastcgi_cache_background_update  off;  # fastcgi_cache_background_update on | off; Default: fastcgi_cache_background_update off; Context: http, server, location -- Allows starting a background subrequest to update an expired cache item, while a stale cached response is returned to the client.
            # fastcgi_cache_purge;  # fastcgi_cache_purge string ...; Default: --; Context: http, server, location -- Defines conditions under which the request will be considered a cache purge request.
            # fastcgi_cache_bypass;  # fastcgi_cache_bypass string ...; Default: --; Context: http, server, location -- Defines conditions under which the response will not be taken from a cache.
            # fastcgi_cache_max_range_offset;  # fastcgi_cache_max_range_offset number; Default: --; Context: http, server, location -- Sets an offset in bytes for byte-range requests.
            # fastcgi_cache_use_stale  off;  # fastcgi_cache_use_stale error | timeout ... Default: fastcgi_cache_use_stale off; Context: http, server, location -- Determines in which cases a stale cached response can be used when an error occurs during communication with the FastCGI server.
            # ==========  FastCGI End  ==========
        }

        location  ~*  \.(css)$  {

        }

        location  ~*  \.(js)$  {

        }

        location  ~*  \.(png|jpg|jpeg|gif)$  {

        }

        location  ~*  \.(woff|woff2|ttf)$  {

        }

    }

}
